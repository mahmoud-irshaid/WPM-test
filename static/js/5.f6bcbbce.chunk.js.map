{"version":3,"sources":["correct.wav","wrong.wav","components/typer.js","components/Home.js"],"names":["Typer","chkWord","getStarted","forwardedRef","type","autoFocus","ref","onInput","onKeyDown","onClick","e","target","select","Timer","lazy","Word","Modal","Header","Home","useState","score","setscore","score2","setscore2","time","settime","isPlaying","setisPlaying","currentWord","setcurrentWord","newWord","setnewWord","gameover","setgameover","cutter","setcutter","Started","setStarted","wordsList","useRef","ref2","words","useContext","WordContext","correctSound","Audio","correctFx","wrongSound","wrongFx","useEffect","interval","setInterval","i","index","Math","floor","random","length","setWord","interval2","setTimeout","clearInterval","join","current","placeholder","scores","localStorage","getItem","setItem","JSON","parse","push","sort","a","b","splice","stringify","style","forwardRef","className","onMouseDown","params","checked","id","fallback","word","cuttedWord","value","slice","play","correct","document","createElement","innerHTML","getElementById","appendChild","window","location","reload","src","disabled","href"],"mappings":"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","file":"static/js/5.f6bcbbce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/correct.fd94c9d0.wav\";","export default __webpack_public_path__ + \"static/media/wrong.b9fb0d62.wav\";","function Typer({chkWord ,getStarted ,forwardedRef}) {\r\n    \r\n    return (\r\n        <>\r\n            <input type='text' autoFocus  ref={forwardedRef}  onInput={chkWord}  onKeyDown={getStarted} onClick={(e)=>(e.target.select())}/>\r\n        </>\r\n    )\r\n}\r\nexport default Typer;","import React, { useContext, useEffect, useState, useRef,lazy,Suspense } from 'react'\r\nimport correctFx from '../correct.wav'\r\nimport wrongFx from '../wrong.wav'\r\nimport Typer from './typer';\r\nimport { WordContext } from '../wordBankContext';\r\n\r\nconst Timer = lazy(() => import('./timer'))\r\nconst Word = lazy(() => import('./word'))\r\nconst Modal = lazy(() => import('./modal'))\r\nconst Header = lazy(() => import('./header'))\r\n\r\nexport default function Home() {\r\n    let [score, setscore] = useState(0)\r\n    let [score2, setscore2] = useState(0)\r\n    let [time, settime] = useState(60)\r\n    let [isPlaying, setisPlaying] = useState(false)\r\n    let [currentWord, setcurrentWord] = useState('')\r\n    let [newWord, setnewWord] = useState('')\r\n    const [gameover, setgameover] = useState(false)\r\n    let [cutter, setcutter] = useState(0)\r\n    const [Started, setStarted] = useState(false)\r\n    const [wordsList, setwordsList] = useState([])\r\n\r\n    const ref = useRef();\r\n    const ref2 = useRef();\r\n\r\n    const { words  } = useContext(WordContext)\r\n\r\n    const correctSound = new Audio(correctFx);\r\n    const wrongSound = new Audio(wrongFx);\r\n\r\n\r\n    // timer count 60 seconds\r\n    useEffect(() => {\r\n\r\n        // decrease the time \r\n        const interval = setInterval(() => {\r\n            time >= 0 && Started ? settime(time--) : setisPlaying(false)\r\n        }, 1000);\r\n\r\n        //!Started && setWord()\r\n        if (!Started ) {\r\n            for (let i = 0; i < 1000; i++) {\r\n                const index = Math.floor(Math.random() * words.length);\r\n                wordsList[i] = words[index]\r\n            }\r\n            setWord()\r\n        }\r\n\r\n\r\n        // check if the game is over\r\n        const interval2 = setInterval(() => {\r\n            if (!isPlaying && time === 0) {\r\n                setTimeout(() => {\r\n                    setgameover(true)\r\n                }, 1000);\r\n            }\r\n        }, 100);\r\n\r\n\r\n        return () => {\r\n            clearInterval(interval, interval2)\r\n        }\r\n    }, [Started])\r\n\r\n\r\n\r\n    // set new word every time \r\n    const setWord = () => {\r\n        setcurrentWord(wordsList[0] + ' ')\r\n        setnewWord(wordsList.join(' '))\r\n        ref.current.placeholder = wordsList[0]\r\n    }\r\n\r\n\r\n\r\n    // check the word from user \r\n    const chkWord = () => {\r\n        let cuttedWord = ref.current.value.slice(cutter)\r\n        if (currentWord[0] === cuttedWord) {\r\n            if (currentWord.length > 0)\r\n                setcurrentWord(currentWord.slice(cuttedWord.length))\r\n            setcutter(++cutter)\r\n            ref.current.className = 'correct'\r\n        }\r\n        else {\r\n            ref.current.className = 'incorrect'\r\n            wrongSound.play()\r\n        }\r\n\r\n\r\n        if (cuttedWord === currentWord && time > 0) {\r\n            setisPlaying(true)\r\n            setscore(score + 1)\r\n            setscore2(score2 + wordsList[0].length)\r\n            ref.current.value = ''\r\n            setcutter(0)\r\n\r\n            let correct = document.createElement('span')\r\n            correct.innerHTML = wordsList[0] + ' '\r\n            document.getElementById('correct').appendChild(correct)\r\n\r\n            wordsList.splice(0, 1)\r\n            setnewWord(wordsList.join(' '))\r\n            setWord()\r\n            correctSound.play()\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function getStarted() {\r\n        setStarted(true)\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (score > 0) {\r\n            let scores = localStorage.getItem('scores') || null\r\n            if (scores === null) {\r\n                scores = []\r\n                localStorage.setItem('scores', scores)\r\n            }\r\n            else\r\n                scores = JSON.parse(scores)\r\n\r\n            scores.push(score)\r\n            scores = scores.sort((a, b) => (b - a))\r\n            scores.length > 3 && scores.splice(3)\r\n            localStorage.setItem('scores', JSON.stringify(scores))\r\n        }\r\n    }, [gameover])\r\n\r\n\r\n\r\n    function closeNav(params) {\r\n        ref2.current.checked = false\r\n    }\r\n\r\n    {gameover && (ref.current.style='color:black;filter:contrast(.1)')}\r\n    return (\r\n        <>\r\n            <Suspense><Header forwardRef={ref2} /></Suspense>\r\n            <div className=\"container\" onMouseDown={closeNav}>\r\n                <div className=\"countersContainer\">\r\n\r\n                    <div className=\"counters scoreDiv\">\r\n                        <span className=\"score\" >{score}</span>\r\n                        <p>word/min</p>\r\n                    </div>\r\n\r\n                    <div className=\"counters\" id=\"timerDiv\">\r\n                        <Suspense fallback={<div>Loading...</div>}><Timer time={time} /></Suspense>\r\n                        <p>seconds</p>\r\n                    </div>\r\n\r\n                    <div className=\"counters scoreDiv\">\r\n                        <span className=\"score\" >{score2}</span>\r\n                        <p>chars/min</p>\r\n                    </div>\r\n                </div>\r\n                <div className='wordsAndTyperDiv'>\r\n                    <div className=\"wordsContainer\">\r\n                        <div>\r\n                        <Suspense><Word word={newWord} /></Suspense>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"typerContainer\">\r\n                    <Typer chkWord={chkWord} getStarted={getStarted} forwardedRef={ref}/>\r\n                    </div>\r\n                    {gameover && <p className='gameover'>Game Over !!!</p>}\r\n                    <button id='restart' onClick={()=>window.location.reload()}>Restart <img src='/assets/restart.svg'/></button>\r\n\r\n                    <div id='correct'></div>\r\n                </div>\r\n                {gameover && (ref.current.disabled = true)}\r\n            </div>\r\n            {gameover && <Suspense><Modal score={score} score2={score2}></Modal></Suspense>}\r\n\r\n           <a id='copy' href='https://github.com/mahmoud-irshaid'><img src='/assets/github.png' /> @2021 CopyRight By Mahmoud Irshaid</a>\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}